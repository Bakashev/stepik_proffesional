# Реализуйте функцию hide_card(), которая принимает один аргумент:

# card_number — строка, представляющая собой корректный номер банковской карты из 16 цифр, между которыми могут
# присутствовать символы пробела
# Функция должна заменять первые 12 цифр в строке card_number на символ * и возвращать полученный результат.
# Если между цифрами в номере имелись символы пробела, их следует удалить.

# card: str = '905 678123 45612 56'
#
#
# def hide_card(number) -> str:
#     rez: str = ''
#     for elem in number:
#         if elem != ' ':
#             rez += elem
#     shifr_rez: str = ('*' * 12) + rez[12:]
#     return shifr_rez
#
# print(hide_card(card))
# ____________________________________________________________
# Реализуйте функцию same_parity(), которая принимает один аргумент:#
# numbers — список целых чисел
# Функция должна возвращать новый список, элементами которого являются числа из списка numbers, имеющие
# ту же четность, что и первый элемент этого списка.
# # Примечание 1. Числа в возвращаемом функцией списке должны располагаться в своем исходном порядке.
# # Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию same_parity(), но не код, вызывающий ее.

# def same_parity(number) -> list:
#     rez: list = []
#
#     if len(number) > 0:
#         if int(number[0]) % 2 == 0:
#             for elem in number:
#
#                 if int(elem) % 2 == 0:
#                     rez.append(elem)
#         else:
#             for elem in number:
#                 if int(elem) % 2 == 1:
#                     rez.append(elem)
#     return rez
#
#
# print(same_parity([]))
# print(same_parity([6, 0, 67, -7, 10, -20]))
# print(same_parity([-7, 0, 67, -9, 70, -29, 90]))
#----------------------------------------------------------------------------------------------------------------

#Будем считать, что PIN-код является корректным, если он удовлетворяет следующим условиям:

# состоит из 4, 5 или 6 символов состоит только из цифр (0−90−9)
# не содержит пробелов
# Реализуйте функцию is_valid(), которая принимает один аргумент:
#
# string — произвольная строка
# Функция должна возвращать значение True, если строка string представляет собой корректный PIN-код,
# или False в противном случае.

# def is_valid(arg) -> bool:
#     if arg.isdigit() and (len(arg) == 4 or len(arg) == 5 or len(arg) == 6):
#         return True
#     else:
#         return False
#
# print(is_valid('4367'))
# print(is_valid('92134'))
# print(is_valid('89abc1'))
# print(is_valid('900876'))
# print(is_valid('49 83'))
#----------------------------------------------------------------------------------------------------------------

#Реализуйте функцию print_given(), которая принимает произвольное количество позиционных и именованных аргументов
# и выводит все переданные аргументы, указывая тип каждого. Пары аргумент-тип должны выводиться каждая
# на отдельной строке, в следующем формате:

# для позиционных аргументов:
# <значение аргумента> <тип аргумента>
# для именованных аргументов:
# <имя переменной> <значение аргумента> <тип аргумента>

# def print_given(*args, **kwargs):
#
#     for i in args:
#         print(i, type(i))
#     for key, value in sorted(kwargs.items()):
#         print(key, value, type(value))
#
# print_given(1, [1, 2, 3], 'three', two=2)
# print_given('apple', 'cherry', 'watermelon')
# print_given(b=2, d=4, c=3, a=1)
# print_given()

#Реализуйте функцию convert(), которая принимает один аргумент:
#string — произвольная строка
#Функция должна возвращать строку string:
#полностью в нижнем регистре, если букв в нижнем регистре в этой строке больше
#полностью в верхнем регистре, если букв в верхнем регистре в этой строке больше
#полностью в нижнем регистре, если количество букв в верхнем и нижнем регистрах в этой строке совпадает

#----------------------------------------------------------------------------------------------------------------
# def convert(args) -> str:
#     small = 0
#     big = 0
#     for i in args:
#         if i.isalpha():
#             if i.islower():
#                 small +=1
#             else:
#                 big +=1
#     if small > big:
#         return args.lower()
#     elif small < big:
#         return  args.upper()
#     else:
#         return args.lower()
#
#
# print(convert('BEEgeek'))
# print(convert('pyTHON'))
# print(convert('pi31415!'))
#----------------------------------------------------------------------------------------------------------------
#Анаграммы — это слова, которые состоят из одинаковых букв. Например:
#
# адаптер — петарда
# адресочек — середочка
# азбука — базука
# аистенок — осетинка
# Реализуйте функцию filter_anagrams(), которая принимает два аргумента в следующем порядке:
#
# word — слово в нижнем регистре
# words — список слов в нижнем регистре
# def filter_anagrams(*args):
#     res: list = []
#     word: str = sorted(args[0])
#
#     word_list: list = args[1]
#     for elem in args[1]:
#         if sorted(elem) == word:
#             res.append(elem)
#     return res
#
# word = 'abba'
# anagrams = ['aabb', 'abcd', 'bbaa', 'dada']
#
# print(filter_anagrams(word, anagrams))
#
# print(filter_anagrams('отсечка', ['сеточка', 'стоечка', 'тесачок', 'чесотка']))
#
# print(filter_anagrams('стекло', []))

#----------------------------------------------------------------------------------------------------------------
# В различных социальных сетях существуют системы лайков, которые в зависимости от количества людей, оценивших запись,
# показывают соответствующую информацию.
#
# Реализуйте функцию likes(), которая принимает один аргумент:
#
# names — список имён
# Функция должна возвращать строку в соответствии с примерами ниже, содержание которой зависит от
# количества имён в списке names.

def likes(names):
    res = ''
    if len(names) == 0:
        res = 'Никто не оценил данную запись'
    if 0 < len(names) < 4:
        if len(names) == 1:
            res = f'{names[0]} оценил(а) данную запись'
        elif len(names) == 2:
            res = (f'{names[0]} и {names[1]} оценили данную запись')
        else:
            res =f'{names[0]}, {names[1]} и {names[2]} оценили данную запись'
    if len(names) > 3:
        res = f'{names[0]}, {names[1]} и {len(names[2:])} других оценили данную запись'
    return res

print(likes([]))
print(likes(['Тимур']))
print(likes(['Тимур', 'Артур']))
print(likes(['Тимур', 'Артур', 'Руслан']))
print(likes(['Тимур', 'Артур', 'Руслан', 'Анри']))
print(likes(['Тимур', 'Артур', 'Руслан', 'Анри', 'Дима']))
print(likes(['Тимур', 'Артур', 'Руслан', 'Анри', 'Дима', 'Рома', 'Гвидо', 'Марк']))
print(likes(['Дима', 'Алиса']))
print(likes(['Эндрю', 'Тоби', 'Том']))